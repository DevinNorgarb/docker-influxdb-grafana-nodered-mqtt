{"_id":"@wz2b/node-red-influxdb-line-protocol","_rev":"1-6f5d56ae4cc5c75699693e50e4e95e89","name":"@wz2b/node-red-influxdb-line-protocol","dist-tags":{"latest":"0.2.0"},"versions":{"0.2.0":{"name":"@wz2b/node-red-influxdb-line-protocol","version":"0.2.0","description":"Parses InfluxDB Line Protocol to JSON and vice versa.","author":{"name":"opatut"},"keywords":["node-red","influxdb","line-protocol"],"contributors":[{"name":"Christopher Piggott","email":"cpiggott@gmail.com","url":"https://github.com/wz2b"}],"license":"MIT","repository":{"type":"git","url":"git+https://github.com/wz2b/node-red-contrib-influxdb-line-protocol.git"},"scripts":{"test":"jest"},"node-red":{"version":">=2.0.0","nodes":{"influxdb-line-protocol":"influxdb-line-protocol.js"}},"devDependencies":{"jest":"^24.0.0","node-red":"^2.2.2","node-red-node-test-helper":"^0.2.7"},"dependencies":{"node-red-contrib-influxdb-line-protocol":"file:"},"gitHead":"19092c790af4ac65d6f7e285e5d290a138319648","bugs":{"url":"https://github.com/wz2b/node-red-contrib-influxdb-line-protocol/issues"},"homepage":"https://github.com/wz2b/node-red-contrib-influxdb-line-protocol#readme","_id":"@wz2b/node-red-influxdb-line-protocol@0.2.0","_nodeVersion":"16.13.1","_npmVersion":"7.0.15","dist":{"integrity":"sha512-8pzk2NAwo272dVAN2VF2wY1qlbzhR7D4Zq2UHmyxvJI4kPV9cXcnlQiEyayFAhoLgxgaU3+qLwhBG0tY9ab/Yw==","shasum":"39d2103b0ec2ea244fe0c2c7f649afec38934c8f","tarball":"https://registry.npmjs.org/@wz2b/node-red-influxdb-line-protocol/-/node-red-influxdb-line-protocol-0.2.0.tgz","fileCount":13,"unpackedSize":27376,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiPNZ+ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrMVA/9GVDF9PpABmzzqFODLW4CTsCBHDvOb1aKMUR+Os9nklIQJS45\r\n+17y2EUW46GgBzYLB/Kol6OzXv+xQfgFrE5z6u5xlS4LefWKkg1EYrWp/9R2\r\naeBhqXD79GaTtXa7FpoRNUzhypGPrv/vzdk6C0eedDG/50mYVQFhnGLSO34J\r\nyHJmUbJPIoAMxxJOOaf4BpxRDiJOU3tamUwOrVejwUZ46hMLDyhvRwdsIIhy\r\nyr32Kfwu7Fw2I865MVkGqJWaXh3NrRvcOgJ7oYoSGJAIK1OFawME/qVVUjHh\r\ndPmlPFB4QPHusCR44X/iIF/FBe14xHTZhl5j6Lr5WUy5ug+QB8SlJQjNuYpJ\r\nXcVdc/gwlcll0oukNmvfOe9kIo0byrLMsqyyoygWLY41/8NXBbKql78kAWPj\r\npFv/h++p2AEfKJnLSmxBw7eXTX5VNZ0avVpM13ZFo33FJgQaIzEU1t/tx7Cp\r\nJVCLjNqVPtgVnXmlwqWDBw/dkKUmWc+wycWg82Uu7H0c6xh+vyAWawdotjDp\r\nyxI6ufTYUjxOvgUZ4Bo+RNqrwre29hseXSvRJZ8k5Yq3Dy0gv6BLwqGgJM/z\r\nd3l/W64WNTVtZ1b19nrLG6/qiGedZREWUnC5IuUbQszSb57qNuGVEi5L+PUL\r\nxMoTvOJPpFzxOanfaFE+hJJXm5d95TV7AwA=\r\n=cTOa\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCbf/Y2jWSPEQ2a8QVhCeopj28K25Wz/5XxrlZEYWvDqgIhAKzfJ8ntHe+s3eHPUVnNviyt55bi9UT4HyYhEGVeZVry"}]},"_npmUser":{"name":"wz2b","email":"cpiggott@gmail.com"},"directories":{},"maintainers":[{"name":"wz2b","email":"cpiggott@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/node-red-influxdb-line-protocol_0.2.0_1648154237956_0.5863980535077271"},"_hasShrinkwrap":false}},"time":{"created":"2022-03-24T20:37:17.905Z","0.2.0":"2022-03-24T20:37:18.138Z","modified":"2022-04-11T10:22:00.949Z"},"maintainers":[{"name":"wz2b","email":"cpiggott@gmail.com"}],"description":"Parses InfluxDB Line Protocol to JSON and vice versa.","homepage":"https://github.com/wz2b/node-red-contrib-influxdb-line-protocol#readme","keywords":["node-red","influxdb","line-protocol"],"repository":{"type":"git","url":"git+https://github.com/wz2b/node-red-contrib-influxdb-line-protocol.git"},"contributors":[{"name":"Christopher Piggott","email":"cpiggott@gmail.com","url":"https://github.com/wz2b"}],"author":{"name":"opatut"},"bugs":{"url":"https://github.com/wz2b/node-red-contrib-influxdb-line-protocol/issues"},"license":"MIT","readme":"# node-red-contrib-influxdb-line-protocol\n\nParses [InfluxDB Line\nProtocol](https://docs.influxdata.com/influxdb/v1.7/write_protocols/line_protocol_reference/)\nto JSON and vice versa.  There is one node that transfers in both directions:\nif you provide it an input that is an object, it produces line protocol (a string).  If\nyou provide it a string, it parses it as line protocol and emits an object.\n\nWhat's nice about this format is that it's simple, and it works directly with\ninfluxdb, telegraf (via MQTT if you like), or the line protocol input to\nthe cloud grafana.com (which is really prometheus, but has a line protocol\ncompatible input method).\n\nThe parser and formatter functions in this node aren't particularily strong.\nThey are rather simple, but they work for all of the original author's use cases.\nIf you encounter any limitations or problems feel free to report a bug\nvia github.\n\n\n## configuration\n\nThis node requires no configuration and by default will write all fields as\neither floats, strings, or booleans depending on the input type.  One of the\nbehaviors of influxdb is that you can't switch fields between float and int once\nthe first point has been written.  Most people are fine with just writing\nfloats, but there are certain situations where you need to force the type to\nan integer, including:\n\n * pre-existing fields in a measurement that are in integer format\n * scientific requirements that numbers be exact\n * need to do comparisons against exact int values without worrying about float/double ULPs\n * specific performance concerns that are helped by data being floats\n\nIn these cases, the node configuration allows you to set a default type (which\ndefaults to float) and a list of specific fields that need to be mapped to one\ntype or the other.  This is completely optional; if you do nothing, everything\nwill be written to line protocol as a float.\n\nThis type mapping mechanism only affects the JSON to line protocol conversion\ndirection.  It stems from the fact that there are not really ints in basic\njavascript, only 'number'.\n\n## Rounding\n\nIf you specify that a field be transformed to an integer, but the input value has\na fractional component, it will be rounded.  If someone has the need for this\nbehavior to be selectable (for example Math.ceil() or Math.floor()) please\nsubmit an issue.\n\n\n## Example\n\nThe following input string in `msg.payload`:\n\n```\nmeasurementName,tag1=tagValue1,tag2=tagValue2 field1=42,field2=1337,field3=\"foobar\" 1546300800000000000\n```\n\nWill yield this JSON output in `msg.payload`:\n\n```json\n{\n  \"measurement\": \"measurementName\",\n  \"tags\": {\n    \"tag1\": \"tagValue1\",\n    \"tag2\": \"tagValue2\"\n  },\n  \"fields\": {\n    \"field1\": 42,\n    \"field2\": 1337,\n    \"field3\": \"foobar\"\n  },\n  \"timestamp\": 1546300800000\n}\n```\n\nIt works the other way around, too. Whatever you feed in (`string` or `Object`)\nis parsed or formatted, respectively.\n\n### Array operation\n\nIf your `msg.payload` is an array, it will operate on each item independently.\nThat may actually lead to some items being parsed and others being formatted,\ndepending on the previous state. Filter or map your content beforehand, if this\nis not desired.\n\n### Options\n\nYou can check the `addTimestamp` option. In that case, if a point does not\ncontain a timestamp (nanosecond epoch at end in string form, or millisecond\nepoch `timestamp` field in JSON object), it will be added with the current\ntime. \n\nThis will never override an existing truthy timestamp value. Strip or override\nit yourself, preferably while your data is in JSON form, if you need such\nbehaviour.\n\n## License\n\n[MIT](./LICENSE.txt)\n","readmeFilename":"README.md"}