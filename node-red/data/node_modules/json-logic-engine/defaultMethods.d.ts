declare var _default: {
    someYield: {
        yields: boolean;
        deterministic: (data: any, buildState: any) => any;
        build: (input: any, context: any, above: any, engine: any, buildState: any) => any;
        asyncBuild: (input: any, context: any, above: any, engine: any, buildState: any) => any;
        method: (input: any, context: any, above: any, engine: any) => any;
        asyncMethod: (input: any, context: any, above: any, engine: any) => Promise<any>;
        traverse: boolean;
    };
    everyYield: {
        yields: boolean;
        deterministic: (data: any, buildState: any) => any;
        build: (input: any, context: any, above: any, engine: any, buildState: any) => any;
        asyncBuild: (input: any, context: any, above: any, engine: any, buildState: any) => any;
        method: (input: any, context: any, above: any, engine: any) => any;
        asyncMethod: (input: any, context: any, above: any, engine: any) => Promise<any>;
        traverse: boolean;
    };
    filterYield: {
        yields: boolean;
        deterministic: (data: any, buildState: any) => any;
        build: (input: any, context: any, above: any, engine: any, buildState: any) => any;
        asyncBuild: (input: any, context: any, above: any, engine: any, buildState: any) => any;
        method: (input: any, context: any, above: any, engine: any) => any;
        asyncMethod: (input: any, context: any, above: any, engine: any) => Promise<any>;
        traverse: boolean;
    };
    mapYield: {
        yields: boolean;
        deterministic: (data: any, buildState: any) => any;
        build: (input: any, context: any, above: any, engine: any, buildState: any) => any;
        asyncBuild: (input: any, context: any, above: any, engine: any, buildState: any) => any;
        method: (input: any, context: any, above: any, engine: any) => any;
        asyncMethod: (input: any, context: any, above: any, engine: any) => Promise<any>;
        traverse: boolean;
    };
    reduceYield: {
        yields: boolean;
        deterministic: (data: any, buildState: any) => any;
        build: (input: any, context: any, above: any, engine: any, buildState: any) => any;
        asyncBuild: (input: any, context: any, above: any, engine: any, buildState: any) => any;
        method: (input: any, context: any, above: any, engine: any) => any;
        asyncMethod: (input: any, context: any, above: any, engine: any) => Promise<any>;
        traverse: boolean;
    };
    ifYield: {
        yields: boolean;
        method: (input: any, context: any, above: any, engine: any) => any;
        asyncMethod: (input: any, context: any, above: any, engine: any) => Promise<any>;
        traverse: boolean;
    };
    '+': (data: any) => any;
    '*': (data: any) => any;
    '/': (data: any) => any;
    '-': (data: any) => any;
    '%': (data: any) => any;
    max: (data: any) => number;
    min: (data: any) => number;
    in: ([item, array]: [any, any]) => any;
    '>': ([a, b]: [any, any]) => boolean;
    '<': ([a, b, c]: [any, any, any]) => boolean;
    preserve: {
        traverse: boolean;
        method: any;
    };
    if: {
        method: (input: any, context: any, above: any, engine: any) => any;
        deterministic: (data: any, buildState: any) => any;
        asyncMethod: (input: any, context: any, above: any, engine: any) => Promise<any>;
        traverse: boolean;
    };
    '<=': ([a, b, c]: [any, any, any]) => boolean;
    '>=': ([a, b]: [any, any]) => boolean;
    '==': ([a, b]: [any, any]) => boolean;
    '===': ([a, b]: [any, any]) => boolean;
    '!=': ([a, b]: [any, any]) => boolean;
    '!==': ([a, b]: [any, any]) => boolean;
    xor: ([a, b]: [any, any]) => number;
    or: (arr: any) => any;
    and: (arr: any) => any;
    substr: ([string, from, end]: [any, any, any]) => any;
    length: (i: any) => any;
    get: {
        method: ([data, key, defaultValue]: [any, any, any], context: any, above: any, engine: any) => any;
    };
    var: (key: any, context: any, above: any, engine: any) => any;
    missing: (checked: any, context: any, above: any, engine: any) => any[];
    missing_some: ([needCount, options]: [any, any], context: any, above: any, engine: any) => any[];
    map: {
        deterministic: (data: any, buildState: any) => any;
        method: (input: any, context: any, above: any, engine: any) => any;
        asyncMethod: (input: any, context: any, above: any, engine: any) => Promise<any>;
        compile: (data: any, buildState: any) => string;
        traverse: boolean;
    };
    some: {
        deterministic: (data: any, buildState: any) => any;
        method: (input: any, context: any, above: any, engine: any) => any;
        asyncMethod: (input: any, context: any, above: any, engine: any) => Promise<any>;
        compile: (data: any, buildState: any) => string;
        traverse: boolean;
    };
    all: {
        deterministic: (data: any, buildState: any) => any;
        method: (input: any, context: any, above: any, engine: any) => any;
        asyncMethod: (input: any, context: any, above: any, engine: any) => Promise<any>;
        compile: (data: any, buildState: any) => string;
        traverse: boolean;
    };
    none: {
        traverse: boolean;
        method: (val: any, context: any, above: any, engine: any) => boolean;
        asyncMethod: (val: any, context: any, above: any, engine: any) => Promise<boolean>;
        compile: (data: any, buildState: any) => string | false;
    };
    merge: (arrays: any) => any[];
    every: {
        deterministic: (data: any, buildState: any) => any;
        method: (input: any, context: any, above: any, engine: any) => any;
        asyncMethod: (input: any, context: any, above: any, engine: any) => Promise<any>;
        compile: (data: any, buildState: any) => string;
        traverse: boolean;
    };
    filter: {
        deterministic: (data: any, buildState: any) => any;
        method: (input: any, context: any, above: any, engine: any) => any;
        asyncMethod: (input: any, context: any, above: any, engine: any) => Promise<any>;
        compile: (data: any, buildState: any) => string;
        traverse: boolean;
    };
    reduce: {
        deterministic: (data: any, buildState: any) => any;
        compile: (data: any, buildState: any) => string;
        method: (input: any, context: any, above: any, engine: any) => any;
        asyncMethod: (input: any, context: any, above: any, engine: any) => Promise<any>;
        traverse: boolean;
    };
    not: (value: any) => boolean;
    '!': (value: any) => boolean;
    '!!': (value: any) => boolean;
    cat: (arr: any) => any;
    keys: (obj: any) => string[];
    eachKey: {
        traverse: boolean;
        method: (object: any, context: any, above: any, engine: any) => {};
        useContext: boolean;
        deterministic: (data: any, buildState: any) => boolean;
        compile: (data: any, buildState: any) => string;
        asyncMethod: (object: any, context: any, above: any, engine: any) => Promise<any>;
    };
};
export default _default;
