declare namespace _default {
    export { build };
    export { buildAsync };
    export { buildString };
    export { r };
    export { rAsync };
}
export default _default;
/**
 * Used to keep track of the compilation.
 */
export type BuildState = {
    engine?: any;
    notTraversed?: any;
    functions?: any;
    methods?: any;
    state?: any;
    processing?: any[];
    async?: any;
    above?: any[];
    asyncDetected?: boolean;
    values?: any;
    yieldUsed?: any;
    useContext?: boolean;
    avoidInlineAsync?: boolean;
};
/**
 * Synchronously compiles the logic to a function that can run the logic more optimally.
 * @param {*} method
 * @param {BuildState} [buildState]
 * @returns
 */
export function build(method: any, buildState?: BuildState): any;
/**
 * Asynchronously compiles the logic to a function that can run the logic more optimally. Also supports async logic methods.
 * @param {*} method
 * @param {BuildState} [buildState]
 * @returns
 */
export function buildAsync(method: any, buildState?: BuildState): Promise<any>;
/**
 * Builds the string for the function that will be evaluated.
 * @param {*} method
 * @param {BuildState} buildState
 * @returns
 */
export function buildString(method: any, buildState?: BuildState): any;
/**
 * A function that handles yields by caching the values to resumable object.
 * @param {Function} func
 * @param {*} input
 * @param {String} name
 * @param {Object} resumable
 * @returns
 */
export function r(func: Function, input: any, name: string, resumable: any): any;
/**
 * A function that handles async yields by caching the values to resumable object.
 * @param {Function} func
 * @param {*} input
 * @param {String} name
 * @param {Object} resumable
 * @returns
 */
export function rAsync(func: Function, input: any, name: string, resumable: any): Promise<any>;
