export default LogicEngine;
/**
 * An engine capable of running synchronous JSON Logic.
 */
declare class LogicEngine {
    /**
     *
     * @param {Object} methods An object that stores key-value pairs between the names of the commands & the functions they execute.
     * @param {{ yieldSupported?: Boolean, disableInline?: Boolean, permissive?: boolean }} options
     */
    constructor(methods?: any, options?: {
        yieldSupported?: boolean;
        disableInline?: boolean;
        permissive?: boolean;
    });
    disableInline: boolean;
    methods: any;
    /** @type {{yieldSupported?: Boolean, disableInline?: Boolean, permissive?: boolean}} */
    options: {
        yieldSupported?: boolean;
        disableInline?: boolean;
        permissive?: boolean;
    };
    /**
     * An internal method used to parse through the JSON Logic at a lower level.
     * @param {*} logic The logic being executed.
     * @param {*} context The context of the logic being run (input to the function.)
     * @param {*} above The context above (can be used for handlebars-style data traversal.)
     * @returns {{ result: *, func: string }}
     */
    _parse(logic: any, context: any, above: any): {
        result: any;
        func: string;
    };
    /**
     *
     * @param {String} name The name of the method being added.
     * @param {Function|{ traverse?: Boolean, method: Function, deterministic?: Function | Boolean }} method
     * @param {{ deterministic?: Boolean, yields?: Boolean, useContext?: Boolean }} annotations This is used by the compiler to help determine if it can optimize the function being generated.
     */
    addMethod(name: string, method: Function | {
        traverse?: boolean;
        method: Function;
        deterministic?: Function | boolean;
    }, { deterministic, yields, useContext }?: {
        deterministic?: boolean;
        yields?: boolean;
        useContext?: boolean;
    }): void;
    /**
     * Adds a batch of functions to the engine
     * @param {String} name
     * @param {Object} obj
     * @param {{ deterministic?: Boolean, yields?: Boolean, useContext?: Boolean, async?: Boolean, sync?: Boolean }} annotations Not recommended unless you're sure every function from the module will match these annotations.
     */
    addModule(name: string, obj: any, annotations: {
        deterministic?: boolean;
        yields?: boolean;
        useContext?: boolean;
        async?: boolean;
        sync?: boolean;
    }): void;
    /**
     *
     * @param {*} logic The logic to be executed
     * @param {*} data The data being passed in to the logic to be executed against.
     * @param {{ above?: any }} options Options for the invocation
     * @returns {*}
     */
    run(logic: any, data?: any, options?: {
        above?: any;
    }): any;
    /**
     *
     * @param {*} logic The logic to be built.
     * @param {{ top?: Boolean, above?: any }} options
     * @returns {Function}
     */
    build(logic: any, options?: {
        top?: boolean;
        above?: any;
    }): Function;
}
